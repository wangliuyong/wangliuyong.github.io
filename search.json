[{"title":"第四篇博客","url":"/2019/03/20/第四篇博客/","content":"555555\n{% img [class names] /path/to/image/head.jpg [100] [100] [title text [alt text]] %}\n"},{"title":"Hello World","url":"/2019/03/20/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"},{"title":"第二篇博客","url":"/2018/08/15/第二篇博客/","content":"方方老师最帅！\n"},{"title":"脚本","url":"/2018/07/15/脚本/","content":"## 理解脚本\n### 我所理解的脚本\n< 脚本就是给机器一行一行执行的文本\n## 写一个脚本\n","tags":["git"]},{"title":"git常用命令","url":"/2018/07/13/git常用命令/","content":"我每天使用 Git ，但是很多命令记不住。\n\n熟练使用，恐怕要记住60～100个命令。\n\n\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n<!-- more -->\n>Workspace：工作区\n>Index / Stage：暂存区\n>Repository：仓库区（或本地仓库）\n>Remote：远程仓库\n# 一、新建代码库\n\n## 在当前目录新建一个Git代码库\n$ git init\n\n## 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n## 下载一个项目和它的整个代码历史\n$ git clone [url]\n# 二、配置\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n\n## 显示当前的Git配置\n$ git config --list\n\n## 编辑Git配置文件\n$ git config -e [--global]\n\n## 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n# 三、增加/删除文件\n\n## 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n## 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n## 添加当前目录的所有文件到暂存区\n$ git add .\n\n## 添加每个变化前，都会要求确认\n## 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n## 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n## 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n## 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n# 四、代码提交\n\n## 提交暂存区到仓库区\n$ git commit -m [message]\n\n## 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n## 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n## 提交时显示所有diff信息\n$ git commit -v\n\n## 使用一次新的commit，替代上一次提交\n## 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n## 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n# 五、分支\n\n## 列出所有本地分支\n$ git branch\n\n## 列出所有远程分支\n$ git branch -r\n\n## 列出所有本地分支和远程分支\n$ git branch -a\n\n## 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n## 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n## 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n## 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n## 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n## 切换到上一个分支\n$ git checkout -\n\n## 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n## 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n## 删除分支\n$ git branch -d [branch-name]\n\n## 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n# 六、标签\n\n## 列出所有tag\n$ git tag\n\n## 新建一个tag在当前commit\n$ git tag [tag]\n\n## 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n## 删除本地tag\n$ git tag -d [tag]\n\n## 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n## 查看tag信息\n$ git show [tag]\n\n## 提交指定tag\n$ git push [remote] [tag]\n\n## 提交所有tag\n$ git push [remote] --tags\n\n## 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n# 七、查看信息\n\n## 显示有变更的文件\n$ git status\n\n## 显示当前分支的版本历史\n$ git log\n\n## 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n## 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n## 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n## 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n## 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n## 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n## 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n## 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n## 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n## 显示暂存区和工作区的差异\n$ git diff\n\n## 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n## 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n## 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n## 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n## 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n## 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n## 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n## 显示当前分支的最近几次提交\n$ git reflog\n# 八、远程同步\n\n## 下载远程仓库的所有变动\n$ git fetch [remote]\n\n## 显示所有远程仓库\n$ git remote -v\n\n## 显示某个远程仓库的信息\n$ git remote show [remote]\n\n## 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n## 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n## 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n## 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n## 推送所有分支到远程仓库\n$ git push [remote] --all\n# 九、撤销\n\n## 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n## 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n## 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n## 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n## 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n## 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n## 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n## 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n## 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n## 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n# 十、其他\n\n## 生成一个可供发布的压缩包\n$ git archive","tags":["git"]},{"title":"第五篇博客","url":"/2018/07/13/第五篇博客/"},{"title":"第三篇博客","url":"/2018/07/12/第三篇博客/","content":"若愚老师最帅！"},{"title":"Git操作手册","url":"/2018/07/12/Git操作手册/","content":"Git 操作手册\n在过去一年的教学中，我被新人问 git 问题问得生活不能自理了。\n\n首先告诉你真相：新人无法理解 git 的原理，你只能背命令。等你用 git 用一个月，再谈原理。\n\n再告诉你一个真相：你无法理解为什么要使用 Git，你什么时候才能理解呢？能你有一天忘了使用 Git 导致了无法挽回的损失时，你就 Git 有多好了。我希望你永远不会遇到那一天。\n\n用 git 三个月，你就自然理解 git 了。不要试图一开始就理解 git！\n<!--more-->\n我曾尝试给小白讲 Git 的原理，后来我发现，如果小白不先用用 Git，就永远无法理解我在说什么。\n\n配置 GitHub\n进入 https://github.com/settings/keys\n如果页面里已经有一些 key，就点「delete」按钮把这些 key 全删掉。如果没有，就往下看\n点击 New SSH key，你需要输入 Title 和 Key，但是你现在没有 key，往下看\n打开 Git Bash\n复制并运行 rm -rf ~/.ssh/* 把现有的 ssh key 都删掉，这句命令行如果你多打一个空格，可能就要重装系统了，建议复制运行。\n运行 ssh-keygen -t rsa -b 4096 -C \"你的邮箱\"，注意填写你的邮箱！\n按回车三次\n运行 cat ~/.ssh/id_rsa.pub，得到一串东西，完整的复制这串东西\n回到上面第 3 步的页面，在 Title 输入「我的第一个 key」\n在 Key 里粘贴刚刚你你复制的那串东西\n点击 Add SSH key\n回到 Git Bash\n运行 ssh -T git@github.com，你可能会看到这样的提示：\n图片\n图片\n\n输入 yes 回车……问你话你就答，别傻在那\n然后如果你看到 Permission denied (publickey). 就说明你失败了，请回到第 1 步重来，是的，回到第 1 步重来；如果你看到 Hi FrankFang! You've successfully authenticated, but GitHub does not provide shell access. 就说明你成功了！\n好了，终于 TMD 添加了一个无聊的 SSH key，不要问我这个有什么用，因为一会儿你就会用到它，你想了解原理就看这篇 文章\n\n如果要讲清楚，太浪费时间了，我们只是想用用 GitHub 而已。\n\n一台电脑只需要一个 SSH key\n一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题\n如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上\n如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key\n配置 git\ngit config --global user.name 你的英文名\ngit config --global user.email 你的邮箱\ngit config --global push.default matching\ngit config --global core.quotepath false\ngit config --global core.editor \"vim\"\n五句话，依次运行。不执行的话，电脑可能会爆炸你信不信。\n\n使用 git\n使用 git 有三种方式，请按照你的需求选择\n\n只在本地使用\n将本地仓库上传到 GitHub\n下载 GitHub 上的仓库\n1 只在本地使用\n1.1 初始化\n创建目录作为我们的项目目录：mkdir git-demo-1\n进入目录 cd git-demo-1\ngit init，这句命令会在 git-demo-1 里创建一个 .git 目录\nls -la 你就会看到 .git 目录，它就是一个「仓库」，不要进去看，这仓库里面有毒，别进去！\n在 git-demo-1 目录里面添加任意文件，假设我们添加了两个文件，分别是 index.html 和 css/style.css\ntouch index.html\nmkdir css\ntouch css/style.css\n运行 git status -sb 可以看到文件前面有 ?? 号\n ## Initial commit on master\n ?? css/\n ?? index.html\n这个 ?? 表示 git 一脸懵逼，不知道你要怎么对待这些变动。\n使用 git add 将文件添加到「暂存区」\n你可以一个一个地 add\ngit add index.html\ngit add css/style.css\n你也可以一次性 add\ngit add . 意思是把当前目录（.表示当前目录）里面的变动都加到「暂存区」\n再次运行 git status -sb，可以看到 ?? 变成了 A\n ## Initial commit on master\n A  css/style.css\n A  index.html\nA 的意思就是添加，也就是说你告诉 git，这些文件我要加到仓库里\n使用 git commit -m \"信息\" 将你 add 过的内容「正式提交」到本地仓库（.git就是本地仓库），并添加一些注释信息，方便日后查阅\n你可以一个一个地 commit\ngit commit index.html -m '添加index.html'\ngit commit css/style.css -m \"添加 css/style.css\"\n你也可以一次性 commit\ngit commit . -m \"添加了几个文件\"\n再再次运行 git status -sb，发现没有文件变动了，这是因为文件的变动已经记录在仓库里了。\n这时你使用 git log 就可以看到历史上的变动：\n\n commit f0d95058cd32a332b98967f6c0a701c64a00810a\n Author: frankfang <frankfang1990@gmail.com>\n Date:   Thu Sep 28 22:30:43 2017 +0800\n\n     添加几个文件\n\n以上就是 git add / git commit 的一次完整过程，可以看到，挺复杂的。原则上，你错了任何一步，就给我从头来一遍，做到你不会再手抖为止。\n1.2 文件变动\n如果我想继续改文件，应该怎么做呢？\n\nstart css/style.css 会使用默认的编辑器打开 css/style.css（macOS 上对应的命令是 open css/style.css）\n然后我们在 css/style.css 里写入 body {background: red}，保存退出\n运行 git status -sb 发现提示中有一个 M\n ## master\n M css/style.css\n这个 M 的意思就是 Modified，表示这个文件被修改了\n此时你如果想让改动保存到仓库里，你需要先 git add css/style.css 或者也可以 git add .\n注意，由于这个 css/style.css 以前被我们 add 过，你往文章上面看，我们是 add 过 css/style.css 的，所以此处的 git add 操作可以省略，但我建议你使用 git 的前一个月，不要省略 git add。\n换句话说，每一次改动，都要经过 git add 和 git commit 两个命令，才能被添加到 .git 本地仓库里。\n再次运行 git status -sb 发现 M 有红色变成了绿色，红色和绿色有啥区别呢？别管它们的区别，记住我说的，先 add，再 commit，等你熟练之后再去理解区别。\n先形成肌肉记忆，在去形成大脑记忆！\n运行 git commit -m \"更新 css/style.css\"，这个改动就被提交到 .git 本地仓库了。再说一次，不要去 .git 目录里面，那里的东西你一无所知。\n再再次运行 git status -sb，会发现没有变更了，这说明所有变动都被本地仓库记录在案了。\n这里来透露一下 git status -sb 是什么意思：git status 是用来显示当前的文件状态的，哪个文件变动了，方便你进行 git add 操作。-sb 选项的意思就是，SB都能看懂，哈，这是开玩笑，-s 的意思是显示总结（summary），-b 的意思是显示分支（branch），所以 -sb 的意思是显示总结和分支。\n1.3 总结\n至此，我们来总结一下用到的命令\n\ngit init，初始化本地仓库 .git\ngit status -sb，显示当前所有文件的状态\ngit add 文件路径，用来将变动加到暂存区\ngit commit -m \"信息\"，用来正式提交变动，提交至 .git 仓库\n如果有新的变动，我们只需要依次执行 git add xxx 和 git commit -m 'xxx' 两个命令即可。别看本教程废话那么多，其实就这一句有用！先 add 再 commit，行了，你学会 git 了。\ngit log 查看变更历史\n2 将本地仓库上传到 GitHub\n如何将我们这个 git-demo-1 上传到 GitHub 呢？\n\n在 GitHub 上新建一个空仓库，名称随意，一般可以跟本地目录名一致，也叫做 git-demo-1\n图片\n图片\n\n按照截图所示，除了仓库名，其他的什么都别改，其他的什么都别改，其他的什么都别改，其他的什么都别改，这样你才能创建一个空仓库\n点击创建按钮之后，GitHub 就会把后续的操作全告诉你，如图\n请点击一下 ssh\n请点击一下 ssh\n\n图片\n图片\n看图，点击 SSH 按钮，点击 SSH 按钮，点击 SSH 按钮，我想你现在肯定不会忘了点击 SSH 按钮了吧~~~~如果不点击这个按钮，你就会使用默认的 HTTPS 地址。但是千万不要使用 HTTPS 地址，因为 HTTPS 地址使用起来特别麻烦，每次都要输入密码，而 SSH 不用输入用户名密码。\n为什么 SSH 不用密码呢，因为你已经上传了 SSH public key。还记得吗？如果不记得，翻到本文第一部分「配置 GitHub」章节。\n由于我们已经有本地仓库了，所以看图，图中下面半部分就是你需要的命令，我们一行一行拷贝过来执行\n找到图中的「…or push an existing repository from the command line」这一行，你会看到 git remote add origin https://github.com/xxxxxxxxxx/git-demo-1.git， 如果你发现这个地址是 https 开头的，那你就做错了，还记得吗，我们要使用 SSH 地址，GitHub 的 SSH 地址是以 git@github.com 开头的。\n再次点击 SSH 按钮，不管我强调多少遍，总会有人忘记点击 SSH 按钮，为什么呢？我也不知道，为了防止你忘了点击 SSH 按钮，我最后再说一遍，「点击 SSH按钮」，点击之后，整个世界就会变得美好起来。\n得到新的命令 git remote add origin git@github.com:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/git-demo-1.git，复制并运行它\n复制第二行 git push -u origin master，运行它\n刷新当前页面，你的仓库就上传到 GitHub 了！是不是特别简单？只要你按照我说的做，一丝不苟，即可。\n3 直接在 GitHub 创建一个仓库，然后下载到本地\n上面两步讲了\n\n在本地创建仓库\n将本地仓库上传到 GitHub\n这里将第三种用法，那就是直接在 GitHub 创建一个仓库，然后下载到本地。\n\n在GitHub 上新建一个仓库 git-demo-2，这次就不创建空仓库了，而是自带 README 和 Lisence 的仓库，创建截图如下：\n图片\n图片\n\n请按图中所示，填写一模一样的内容，然后点击创建按钮。\n这样一来，这个仓库就会自动拥有三个文件：\n图片\n图片\n这三个文件的作用请自行了解：.gitignore 的作用、README.md 的作用 以及 LISENCE 的作用\n好了，现在远程仓库已经创建好了，怎么下载到我们的本地（也就是我们的电脑上）呢？答案是使用 git clone 命令\n点击页面中唯一的绿色按钮「clone or download」，会看到一个弹出层\n图片\n图片\n请确保弹出层里的地址是 SSH 地址，也就是 git@github.com 开头的地址，如果不是，就点击 Use SSH 按钮，就点击 Use SSH 按钮，就点击 Use SSH 按钮。然后复制这个地址。\n打开 Git Bash，找一个安全的目录，比如 ~/Desktop 桌面目录就很安全：cd ~/Desktop。运行。\n运行 git clone 你刚才得到的以git@github.com开头的地址，运行完了你就会发现，桌面上多出一个 git-demo-2 目录。我再说一遍，桌面上多出一个 git-demo-2 目录。我再说一遍，桌面上多出一个 git-demo-2 目录。这个细节很重要，很多小白发现不了这个细节，我也不知道他们是眼瞎还是怎么了……\n进入这个多出来的目录，对的，你肯定会忽略这一步。\n进入这个多出来的目录，对的，你肯定会忽略这一步。\n进入这个多出来的目录，对的，你肯定会忽略这一步。\n好了你进入了这个目录了，如果没有，我就要吐血了，因为我的提示很明显。\n运行 ls -la 你会看到，远程目录的所有文件都在这里出现了，另外你还看到了 .git 本地仓库。这是你就可以添加文件，git add，然后 git commit 了。\n三种方式都说完了，它们分别是：\n\n在本地创建仓库\n将本地仓库上传到 GitHub\n下载 GitHub 上的仓库到本地\n其实呢，我还可以说很多种不同的方式，但是，你记住这几种就行了，够你用的了。我们并不想要了解 git 的所有高级用法，我们的目的很明确：能通过 Git 命令使用 GitHub 就行。\n\n我们再回顾一遍已经学到的命令：（这次只多了一个 git clone 命令）\n\ngit clone git@github.com:xxxx，下载仓库\ngit init，初始化本地仓库 .git\ngit status -sb，显示当前所有文件的状态\ngit add 文件路径，用来将变动加到暂存区\ngit commit -m \"信息\"，用来正式提交变动，提交至 .git 仓库\n如果有新的变动，我们只需要依次执行 git add xxx 和 git commit -m 'xxx' 两个命令即可。别看本教程废话那么多，其实就这一句有用！先 add 再 commit，行了，你学会 git 了。\ngit log 查看变更历史\n如何上传更新\n你在本地目录有任何变动，只需按照以下顺序就能上传：\n\ngit add 文件路径\ngit commit -m \"信息\"\ngit pull （相信我，你一定会忘记这一个命令）\ngit push\n下面是例子\n\ncd git-demo-1\ntouch index2.html\ngit add index2.html\ngit commit -m \"新建 index2.html\"\ngit pull\ngit push\n然后你去 git-demo-1 的 GitHub 页面，就能看到 index2.html 出现在里面了。是不是很……简……单……呢……\n\n其他\n还有一些有用的命令\n\ngit remote add origin git@github.com:xxxxxxx.git 将本地仓库与远程仓库关联\ngit remote set-url origin git@github.com:xxxxx.git 上一步手抖了，可以用这个命令来挽回\ngit branch 新建分支\ngit merge 合并分支\ngit stash 通灵术\ngit stash pop 反转通灵术\ngit revert 后悔了\ngit reset 另一种后悔了\ngit diff 查看详细变化\n学 git 命令都够你们学一周的，所以别妄想现在就掌握它，切记。"}]